// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/tigera/operator/pkg/apis/operator/v1.APIServer":                schema_pkg_apis_operator_v1_APIServer(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.APIServerSpec":            schema_pkg_apis_operator_v1_APIServerSpec(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.APIServerStatus":          schema_pkg_apis_operator_v1_APIServerStatus(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.Auth":                     schema_pkg_apis_operator_v1_Auth(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.Compliance":               schema_pkg_apis_operator_v1_Compliance(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.ComplianceSpec":           schema_pkg_apis_operator_v1_ComplianceSpec(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.ComplianceStatus":         schema_pkg_apis_operator_v1_ComplianceStatus(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.Installation":             schema_pkg_apis_operator_v1_Installation(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.InstallationSpec":         schema_pkg_apis_operator_v1_InstallationSpec(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.InstallationStatus":       schema_pkg_apis_operator_v1_InstallationStatus(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.IntrusionDetection":       schema_pkg_apis_operator_v1_IntrusionDetection(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.IntrusionDetectionSpec":   schema_pkg_apis_operator_v1_IntrusionDetectionSpec(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.IntrusionDetectionStatus": schema_pkg_apis_operator_v1_IntrusionDetectionStatus(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.LogCollector":             schema_pkg_apis_operator_v1_LogCollector(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.LogCollectorSpec":         schema_pkg_apis_operator_v1_LogCollectorSpec(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.LogCollectorStatus":       schema_pkg_apis_operator_v1_LogCollectorStatus(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.LogStorage":               schema_pkg_apis_operator_v1_LogStorage(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.LogStorageSpec":           schema_pkg_apis_operator_v1_LogStorageSpec(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.LogStorageStatus":         schema_pkg_apis_operator_v1_LogStorageStatus(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.Manager":                  schema_pkg_apis_operator_v1_Manager(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.ManagerSpec":              schema_pkg_apis_operator_v1_ManagerSpec(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.ManagerStatus":            schema_pkg_apis_operator_v1_ManagerStatus(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.TigeraStatus":             schema_pkg_apis_operator_v1_TigeraStatus(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.TigeraStatusSpec":         schema_pkg_apis_operator_v1_TigeraStatusSpec(ref),
		"github.com/tigera/operator/pkg/apis/operator/v1.TigeraStatusStatus":       schema_pkg_apis_operator_v1_TigeraStatusStatus(ref),
	}
}

func schema_pkg_apis_operator_v1_APIServer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIServer is the Schema for the apiservers API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.APIServerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.APIServerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.APIServerSpec", "github.com/tigera/operator/pkg/apis/operator/v1.APIServerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1_APIServerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIServerSpec defines the desired state of APIServer",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_APIServerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIServerStatus defines the observed state of APIServer",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_Auth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Auth defines authentication configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type configures the type of authentication used by the manager. Default: \"Basic\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authority": {
						SchemaProps: spec.SchemaProps{
							Description: "Authority configures the OAuth2/OIDC authority/issuer when using OAuth2 or OIDC login. Default: \"\"https://accounts.google.com\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clientID": {
						SchemaProps: spec.SchemaProps{
							Description: "ClientId configures the OAuth2/OIDC client ID to use for OAuth2 or OIDC login.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_Compliance(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Compliance is the Schema for the compliances API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.ComplianceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.ComplianceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.ComplianceSpec", "github.com/tigera/operator/pkg/apis/operator/v1.ComplianceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1_ComplianceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ComplianceSpec defines the desired state of Compliance",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_ComplianceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ComplianceStatus defines the observed state of Compliance",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "State indicates the state of the deployment by the IntrusionDetection controller",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_Installation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Installation is the Schema for the cores API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.InstallationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.InstallationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.InstallationSpec", "github.com/tigera/operator/pkg/apis/operator/v1.InstallationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1_InstallationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstallationSpec defines the desired state of Installation.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"variant": {
						SchemaProps: spec.SchemaProps{
							Description: "Variant is the product to install - one of Calico or TigeraSecureEnterprise Default: Calico",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"registry": {
						SchemaProps: spec.SchemaProps{
							Description: "Registry is the default Docker registry used for component Docker images. Default: docker.io/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullSecrets": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullSecrets is an array of references to Docker registry pull secrets.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"kubernetesProvider": {
						SchemaProps: spec.SchemaProps{
							Description: "KubernetesProvider specifies which platform this cluster is running on. Operator will do it's best to autodetect and set this. But can be overridden here.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"calicoNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "CalicoNetwork specifies configuration options when using Calico provided pod networking.",
							Ref:         ref("github.com/tigera/operator/pkg/apis/operator/v1.CalicoNetworkSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.CalicoNetworkSpec", "k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_operator_v1_InstallationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstallationStatus defines the observed state of Installation",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"variant": {
						SchemaProps: spec.SchemaProps{
							Description: "Variant is the installed product - one of Calico or TigeraSecureEnterprise",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_IntrusionDetection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IntrusionDetection is the Schema for the intrusiondetections API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.IntrusionDetectionSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.IntrusionDetectionStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.IntrusionDetectionSpec", "github.com/tigera/operator/pkg/apis/operator/v1.IntrusionDetectionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1_IntrusionDetectionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IntrusionDetectionSpec defines the desired state of IntrusionDetection",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_IntrusionDetectionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IntrusionDetectionStatus defines the observed state of IntrusionDetection",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "State indicates the state of the deployment by the IntrusionDetection controller",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_LogCollector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LogCollector is the Schema for the logcollectors API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.LogCollectorSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.LogCollectorStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.LogCollectorSpec", "github.com/tigera/operator/pkg/apis/operator/v1.LogCollectorStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1_LogCollectorSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LogCollectorSpec defines the desired state of LogCollector Valid only for the variant 'TigeraSecureEnterprise'.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"s3": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.S3StoreSpec"),
						},
					},
					"syslog": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.SyslogStoreSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.S3StoreSpec", "github.com/tigera/operator/pkg/apis/operator/v1.SyslogStoreSpec"},
	}
}

func schema_pkg_apis_operator_v1_LogCollectorStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LogCollectorStatus defines the observed state of LogCollector",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "State indicates the state of the daemonset by the LogCollector controller",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_LogStorage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LogStorage is the Schema for the logstorages  API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.LogStorageSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.LogStorageStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.LogStorageSpec", "github.com/tigera/operator/pkg/apis/operator/v1.LogStorageStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1_LogStorageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LogStorageSpec defines the desired state of LogStorage",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Node defines the configuration for the elasticsearch cluster nodes. The nodes created will all be of type master, data, and ingest, and the number of nodes, where their data is stored, and what the resource requirements are configured here",
							Ref:         ref("github.com/tigera/operator/pkg/apis/operator/v1.Nodes"),
						},
					},
					"indices": {
						SchemaProps: spec.SchemaProps{
							Description: "Index defines the configuration for the indices in the elasticsearch cluster",
							Ref:         ref("github.com/tigera/operator/pkg/apis/operator/v1.Indices"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.Indices", "github.com/tigera/operator/pkg/apis/operator/v1.Nodes"},
	}
}

func schema_pkg_apis_operator_v1_LogStorageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LogStorageStatus defines the observed state of LogStorage",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "State indicates the state of the deployment by the LogStorage controller",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"elasticsearchHash": {
						SchemaProps: spec.SchemaProps{
							Description: "ElasticsearchHash is a hash representation of the Elasticsearch cluster, and is used so interested components can be notified that the Elasticsearch cluster has be changed in a way that requires the component to recreate it's objects",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kibanaHash": {
						SchemaProps: spec.SchemaProps{
							Description: "KibanaHash is a hash representation of the Kibana cluster, and is used so interested components can be notified that the Kibana cluster has be changed in a way that requires the component to recreate it's objects",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_Manager(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Manager is the Schema for the managers API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.ManagerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.ManagerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.ManagerSpec", "github.com/tigera/operator/pkg/apis/operator/v1.ManagerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1_ManagerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManagerSpec defines optional configuration for the Tigera Secure management console. Valid only for the variant 'TigeraSecureEnterprise'.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"auth": {
						SchemaProps: spec.SchemaProps{
							Description: "Auth is optional authentication configuration for the Tigera Secure management console.",
							Ref:         ref("github.com/tigera/operator/pkg/apis/operator/v1.Auth"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.Auth"},
	}
}

func schema_pkg_apis_operator_v1_ManagerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManagerStatus defines the observed state of Manager",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"auth": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.Auth"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.Auth"},
	}
}

func schema_pkg_apis_operator_v1_TigeraStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TigeraStatus is the Schema for the tigerastatuses API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.TigeraStatusSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.TigeraStatusStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.TigeraStatusSpec", "github.com/tigera/operator/pkg/apis/operator/v1.TigeraStatusStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1_TigeraStatusSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_operator_v1_TigeraStatusStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TigeraStatusStatus defines the observed state of TigeraStatus",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tigera/operator/pkg/apis/operator/v1.TigeraStatusCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"conditions"},
			},
		},
		Dependencies: []string{
			"github.com/tigera/operator/pkg/apis/operator/v1.TigeraStatusCondition"},
	}
}
